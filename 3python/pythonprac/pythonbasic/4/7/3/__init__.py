# 기본적으로, 인자는 위치나 명시적인 키워드로 파이썬 함수에 전달될 수 있습니다.
# 가독성과 성능을 위해, 개발자가 항목이 위치, 위치나 키워드
# 또는 키워드로 전달되는지를 판단할 때 함수 정의만을 보면 되도록,
# 인자가 전달될 방법을 제한하면 좋습니다.
#
# 함수 정의는 다음과 같습니다

# def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
#     -----------    ----------     ----------
#     |                 |                |
#     |            Positional or keyword |
#     | - Keyword only                    -- Positional only
# 여기서 /와 *는 선택적입니다.
# 사용하면, 이 기호는 인자가 함수에 전달되는 방식에 따른 매개 변수의 종류를 나타냅니다
# 위치 전용, 위치-키워드 및 키워드 전용. 키워드 매개 변수는 명명된(named) 매개 변수라고도 합니다.
#
# 4.7.3.1. 위치-키워드(Positional-or-Keyword) 인자
# 함수 정의에 /와 *가 없으면, 인자를 위치나 키워드로 함수에 전달할 수 있습니다.
#
# 4.7.3.2. 위치 전용 매개 변수
# 좀 더 자세하게 살펴보면, 특정 매개 변수를 위치 전용으로 표시할 수 있습니다. 위치 전용이면, 매개 변수의 순서가 중요하며, 키워드로 매개 변수를 전달할 수 없습니다. 위치 전용 매개 변수는 / (슬래시) 앞에 놓입니다. /는 위치 전용 매개 변수를 나머지 매개 변수들로부터 논리적으로 분리하는 데 사용됩니다. 함수 정의에 /가 없으면, 위치 전용 매개 변수는 없습니다.
#
# / 다음의 매개 변수는 위치-키워드나 키워드 전용일 수 있습니다.
#
# 4.7.3.3. 키워드 전용 인자
# 매개 변수를 키워드 인자로 전달해야 함을 나타내도록, 매개 변수를 키워드 전용으로 표시하려면, 첫 번째 키워드 전용 매개 변수 바로 전에 인자 목록에 *를 넣으십시오.
#
# 4.7.3.4. 함수 예제
# /와 * 마커에 주의를 기울이는 다음 예제 함수 정의를 고려하십시오
def standard_arg(arg):
     print(arg)

def pos_only_arg(arg, /):
     print(arg)

def kwd_only_arg(*, arg):
     print(arg)

def combined_example(pos_only, /, standard, *, kwd_only):
     print(pos_only, standard, kwd_only)

#첫 번째 함수 정의 standard_arg는 가장 익숙한 형식으로,
# 호출 규칙에 아무런 제한을 두지 않으며 인자는 위치나 키워드로 전달될 수 있습니다
standard_arg(2)
standard_arg(arg=2)

# 두 번째 함수 pos_only_arg는 함수 정의에 /가 있으므로 위치 매개 변수만 사용하도록 제한됩니다
pos_only_arg(1)
# pos_only_arg(arg=1) 오류 발생함


# 세 번째 함수 kwd_only_args는 함수 정의에서 *로 표시된 키워드 인자만 허용합니다
# kwd_only_arg(3) 오류 발생
kwd_only_arg(arg=3)


# 마지막은 같은 함수 정의에서 세 가지 호출 규칙을 모두 사용합니다
# combined_example(1, 2, 3) 오류 발생
combined_example(1, 2, kwd_only=3)
combined_example(1, standard=2, kwd_only=3)
# combined_example(pos_only=1, standard=2, kwd_only=3) 오류 발생

# 마지막으로, 위치 인자 name과 name을 키로 가지는 **kwds 사이에 잠재적인 충돌이 있는 이 함수 정의를 고려하십시오
def foo(name, **kwds):
    return 'name' in kwds

# 키워드는 항상 첫 번째 매개 변수에 결합하므로 True를 반환할 수 있는 호출은 불가능합니다. 예를 들면:
#foo(1, **{'name': 2})
# 그러나 /(위치 전용 인자)를 사용하면, name을 위치 인자로, 동시에 'name'을 키워드 인자의 키로 사용할 수 있으므로 가능합니다:

def foo(name, /, **kwds):
    return 'name' in kwds
foo(1, **{'name': 2})

# 즉, 위치 전용 매개 변수의 이름을 **kwds에서 모호함 없이 사용할 수 있습니다


#4.7.3.5. 복습
#사용 사례가 함수 정의에서 어떤 매개 변수를 사용할지 결정합니다:

def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
    pass
#지침으로서:

#매개 변수의 이름을 사용자가 사용할 수 없도록 하려면 위치 전용을 사용하십시오.
# 매개 변수 이름이 실제 의미가 없을 때, 함수가 호출될 때 인자의 순서를 강제하려고 할 때,
# 또는 일부 위치 매개 변수와 임의의 키워드를 받아들이고 싶을 때 유용합니다.

#이름이 의미가 있고 함수 정의가 이름을 명시적으로 지정함으로써 더 이해하기 쉬워지거나,
# 사용자가 전달되는 인자의 위치에 의존하지 못하도록 하려면 키워드 전용을 사용하십시오.

#API의 경우, 향후 매개 변수의 이름이 수정될 때 비호환 API 변경이 발생하는 것을 방지하려면 위치 전용을 사용하십시오.

#4.7.4. 임의의 인자 목록
#마지막으로, 가장 덜 사용되는 옵션은 함수가 임의의 개수 인자로 호출될 수 있도록 지정하는 것입니다.
# 이 인자들은 튜플로 묶입니다 (튜플과 시퀀스 을 보세요).
# 가변 길이 인자 앞에, 없거나 여러 개의 일반 인자들이 올 수 있습니다.

def write_multiple_items(file, separator, *args):
    pass
    file.write(separator.join(args))

#보통,
# 이 가변 길이 인자들은 형식 매개변수 목록의 마지막에 옵니다,
# 함수로 전달된 남은 입력 인자들 전부를 그러모으기 때문입니다.
# *args 매개변수 뒤에 등장하는 형식 매개변수들은 모두 〈키워드-전용〉 인자들인데,
# 위치 인자 대신 키워드 인자로만 사용될 수 있다는 뜻입니다.
def concat(*args, sep="/"):
     return sep.join(args)
concat("earth", "mars", "venus")
concat("earth", "mars", "venus", sep=".")
